version: '3.7'

services:

  dart-arangodb:
    container_name: dart-arangodb
    hostname: dart-arangodb
    image: twosixlabsdart/dart-arangodb:latest
    restart: unless-stopped
    volumes:
      - ./data/arangodb/data:/opt/arangodb/data
    ports:
      - 8529:8529
    networks:
      - dart

  dart-postgres:
    container_name: dart-postgres
    hostname: dart-postgres
    image: twosixlabsdart/dart-postgres:latest
    restart: unless-stopped
    environment:
      DART_USER: dart
      DART_PASSWORD: dart_pass
      DART_DB: dart_db
    volumes:
      - ./data/dart-postgres/data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - dart

  dart-es-master:
    image: twosixlabsdart/dart-es:latest
    container_name: dart-es-master
    hostname: dart-es-master
    restart: unless-stopped
    environment:
      ES_TIMEOUT: 120
      ES_NODE_ID: 0
      ES_ROLE: master
      ES_MASTER_NAME: dart-es-master
      ES_CLUSTER: dart-es
    labels:
      autoheal: true
    ports:
      - 9200
      - 9300
    healthcheck:
      test: [ "CMD", "/opt/elasticsearch/bin/healthcheck-es.sh" ]
      interval: 10s
      start_period: 30s
    volumes:
      - ./data/dart-es-master:/opt/app/data
    networks:
      - dart

  dart-es-replica-1:
    image: twosixlabsdart/dart-es:latest
    restart: unless-stopped
    container_name: dart-es-replica-1
    hostname: dart-es-replica-1
    environment:
      ES_TIMEOUT: 120
      ES_ROLE: replica
      ES_NODE_NAME: dart-es-replica-1
      ES_NODE_ID: 1
      ES_CLUSTER: dart-es
      ES_MASTER_NAME: dart-es-master
      ES_DISCOVERY_HOST: dart-es-master
    ports:
      - 9201
      - 9301
    labels:
      autoheal: true
    healthcheck:
      test: [ "CMD", "/opt/elasticsearch/bin/healthcheck-es.sh" ]
      interval: 10s
      start_period: 30s
    volumes:
      - ./data/dart-es-replica-1:/opt/app/data
    depends_on:
      - dart-es-master
    networks:
      - dart

  dart-es-replica-2:
    image: twosixlabsdart/dart-es:latest
    restart: unless-stopped
    container_name: dart-es-replica-2
    hostname: dart-es-replica-2
    environment:
      ES_TIMEOUT: 120
      ES_ROLE: replica
      ES_NODE_NAME: dart-es-replica-2
      ES_NODE_ID: 2
      ES_CLUSTER: dart-es
      ES_MASTER_NAME: dart-es-master
      ES_DISCOVERY_HOST: dart-es-master
    labels:
      autoheal: true
    ports:
      - 9202
      - 9302
    healthcheck:
      test: [ "CMD", "/opt/elasticsearch/bin/healthcheck-es.sh" ]
      interval: 10s
      start_period: 30s
    volumes:
      - ./data/dart-es-replica-2:/opt/app/data
    depends_on:
      - dart-es-master
    networks:
      - dart

  ladle:
    image: twosixlabsdart/ladle:latest
    container_name: ladle
    hostname: ladle
    restart: unless-stopped
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker-1:19092
      PRODUCER_INTERFACE: kafka
      MICRONAUT_SERVER_MULTIPART_MAX-FILE-SIZE: 504857600
      MICRONAUT_SERVER_MAX-REQUEST-SIZE: 504857600
      SQL_DB_ENGINE: postgresql
      SQL_DB_HOST: dart-postgres
      SQL_DB_PORT: 5432
      SQL_DB_USER: dart
      SQL_DB_PASSWORD: dart_pass
      SQL_DB_NAME: dart_db
      SQL_DB_TABLE: sams_progress
    networks:
      - dart

  zookeeper-1:
    image: zookeeper:3.4.14
    restart: unless-stopped
    container_name: zookeeper-1
    hostname: zookeeper-1
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888
      ZOO_MAX_CLIENT_CNXNS: 100000
    volumes:
      - ./data/zookeeper-1/data:/data
      - ./data/zookeeper-1/datalog:/datalog
    networks:
      - dart

  kafka-broker-1:
    image: twosixlabsdart/confluent-kafka:latest
    restart: unless-stopped
    hostname: kafka-broker-1
    container_name: kakfka-broker-1
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER://kafka-broker-1:19092, LISTENER_LOCALHOST://localhost:9092
      KAFKA_BROKER_ID: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER:PLAINTEXT, LISTENER_LOCALHOST:PLAINTEXT
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper-1:2181"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_REPLICA_FETCH_MAX_BYTES: 15000000
      KAFKA_MESSAGE_MAX_BYTES: 15000000
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 110000000
      READERS: eidos
      TOPIC: dart.cdr.streaming.updates
    volumes:
      - ./data/kafka-broker-1:/var/lib/kafka/data
    networks:
      - dart

  topic-provisioner:
    image: twosixlabsdart/topic-provisioner:latest
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker-1:19092
    healthcheck:
      test: [ "CMD", "cat", "/opt/app/interstellar/.success" ]
      interval: 1m30s
      timeout: 10s
      retries: 5
    depends_on:
      - kafka-broker-1
    networks:
      - dart

  document-processing-pipeline:
    image: twosixlabsdart/dart-document-ingestion:latest
    container_name: document-processing-pipeline
    hostname: document-processing-pipeline
    environment:
      PROGRAM_ARGS: "--primary-ds arangodb --sql-ds postgresql"
      POLL_SIZE: 200
      ARANGODB_HOST: dart-arangodb
      ARANGODB_PORT: 8529
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker-1:19092
      STREAM_ANNOTATION_UPDATES: "false"
      QNTFY_NER_HOST: qntfy-ner-annotator
      QNTFY_EVENTS_HOST: qntfy-events-annotator
      QNTFY_CATEGORIES_HOST: qntfy-categories-annotator
      QNTFY_KEY_SENTENCE_HOST: qntfy-key-sentence-annotator
      SEARCH_HOST: dart-es-master
      SEARCH_PORT: 9200
      SQL_DB_ENGINE: postgresql
      SQL_DB_HOST: dart-postgres
      SQL_DB_PORT: 5432
      SQL_DB_USER: dart
      SQL_DB_PASSWORD: dart_pass
      SQL_DB_NAME: dart_db
    restart: unless-stopped
    depends_on:
      - kafka-broker-1
      - topic-provisioner
    networks:
      - dart

  corpex:
    image: twosixlabsdart/corpex:latest
    restart: unless-stopped
    container_name: corpex
    hostname: corpex
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.corpex-service.loadbalancer.server.port=8088"
      - "traefik.http.routers.corpex.priority=100"
      - "traefik.http.routers.corpex.rule=PathPrefix(`/dart/api/v1/corpex`)"
    environment:
      DART_AUTH_BYPASS: "true"
      ELASTICSEARCH_HOST: dart-es-master
      ELASTICSEARCH_PORT: 9200
    networks:
      - dart

  cdr-retrieval:
    image: twosixlabsdart/cdr-retrieval:1.0.11
    restart: unless-stopped
    hostname: cdr-retrieval
    container_name: cdr-retrieval
    environment:
      DART_AUTH_BYPASS: "true"
      ARANGODB_HOST: dart-arangodb
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.cdrs-service.loadbalancer.server.port=8090"
      - "traefik.http.routers.cdr-retrieval.rule=PathPrefix(`/dart/api/v1/cdrs`)"
      - "traefik.http.routers.cdr-retrieval.priority=${CDR_RETRIEVAL_PRIORITY:-100}"
    networks:
      - dart

  readers-output:
    image: twosixlabsdart/reader-output:latest
    restart: unless-stopped
    hostname: readers-output
    container_name: readers-output
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/dart/api/v1/readers/health" ]
      interval: 10s
      start_period: 30s
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker-1:19092
      REST_BOOTSTRAP_SERVERS: "http://indra/dart/notify"
      POSTGRES_HOST: dart-postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: dart
      POSTGRES_PASSWORD: dart_pass
      POSTGRES_DATABASE: dart_db
      ARANGODB_HOST: dart-arangodb
      PERSISTENCE_MODE: local
    labels:
      - "autoheal=true"
      - "traefik.enable=true"
      - "traefik.http.services.readers-service.loadbalancer.server.port=8080"
      - "traefik.http.routers.readers-output.rule=PathPrefix(`/dart/api/v1/readers`)"
      - "traefik.http.routers.readers-output.priority=${READERS_OUTPUT_PRIORITY:-100}"
    volumes:
      - ./data/readers-output:/opt/app/data/
    networks:
      - dart

  forklift:
    image: twosixlabsdart/forklift:latest
    restart: unless-stopped
    container_name: forklift
    environment:
      PROGRAM_ARGS: "--env docker"
      DART_AUTH_BYPASS: "true"
      FORKLIFT_HTTP_PORT: "8091"
      JAVA_OPTS: "-Xms4g -Xmx4g"
      OPERATIONS_DB_HOST: dart-postgres
      OPERATIONS_DB_PASSWORD: dart_pass
      OPERATIONS_DB_PORT: 5432
      OPERATIONS_DB_TABLE: pipeline_status
      OPERATIONS_DB_USER: dart
      OPERATIONS_DB_NAME: dart_db
      CORPEX_HOST: corpex
      CORPEX_PORT: 8088
      DART_NUM_ANNOTATORS: 4
      CORS_ALLOWED_ORIGINS: http://${REST_HOSTNAME}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.forklift-service.loadbalancer.server.port=8091"
      - "traefik.http.routers.forklift.rule=PathPrefix(`/dart/api/v1/forklift`) || PathPrefix(`/dart/api/v1/status`)"
      - "traefik.http.routers.forklift.priority=100"
    volumes:
      - ./data/forklift/inbound:/opt/app/data
    networks:
      - dart

  dart-ui:
    image: twosixlabsdart/dart-ui:latest
    restart: unless-stopped
    container_name: dart-ui
    hostname: dart-ui
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.ui-service.loadbalancer.server.port=8080"
      - "traefik.http.routers.dart-ui.rule=Host(`${PROXY_HOSTNAME:-localhost}`)"
      - "traefik.http.routers.dart-ui.priority=90"
    environment:
      DART_UI_ENV: default
      SEARCH_URL: http://${PROXY_HOSTNAME:-localhost}
      RAW_DOC_URL: http://${PROXY_HOSTNAME:-localhost}/dart/api/v1/cdrs/raw
      PROCUREMENT_URL: http://${PROXY_HOSTNAME:-localhost}
      DART_AUTH_BYPASS: "true"
      CLUSTERING_TEST_MODE: "false"
      CLUSTERING_HOST: concepts-api
      CLUSTERING_PORT: 8080
      CLUSTERING_SCHEME: http
      ARANGODB_HOST: dart-arangodb
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker-1:19092
      POSTGRES_HOST: dart-postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: dart
      POSTGRES_PASSWORD: dart_pass
      POSTGRES_DATABASE: dart_db
    networks:
      - dart

  transporter:
    container_name: transporter
    environment:
      LADLE_HOST: ladle
      LADLE_PORT: 8080
      SOURCE_DIR: /opt/app/data/inbound
      TARGET_DIR: /opt/app/data/completed
    image: twosixlabsdart/transporter:latest
    labels:
      autoheal: true
    networks:
      - dart
    restart: unless-stopped
    volumes:
      - ./data/forklift/inbound:/opt/app/data/inbound
      - ./data/forklift/completed:/opt/app/data/completed

  concepts-api:
    image: twosixlabsdart/concepts-api:latest
    hostname: concepts-api
    container_name: concepts-api
    restart: always
    environment:
      - DISCOVERY_ENABLED=false
      - CLUSTERING_SERVER_ENABLED=true
      - CLUSTERING_HOST=http://hume-oiad
      - CLUSTERING_PORT=5061
    labels:
      - "autoheal=true"
      - "traefik.enable=true"
      - "traefik.http.services.concepts-service.loadbalancer.server.port=8080"
      - "traefik.http.routers.concepts-api.rule=PathPrefix(`/dart/api/v1/cluster`)"
      - "traefik.http.routers.concepts-api.priority=${CONCEPTS_API_PRIORITY:-100}"
    networks:
      - dart

  ontology-registry:
    image: twosixlabsdart/ontology-registry:latest
    restart: unless-stopped
    container_name: ontology-registry
    hostname: ontology-registry
    environment:
      ONTOLOGY_REGISTRY_PORT: 8084
      DART_AUTH_BYPASS: "true"
      POSTGRES_HOST: dart-postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: dart
      POSTGRES_PASSWORD: dart_pass
      POSTGRES_DATABASE: dart_db
      ARANGODB_HOST: dart-arangodb
      KAFKA_BOOTSTRAP_SERVERS: kafka-broker-1:19092
    labels:
      - "autoheal=true"
      - "traefik.enable=true"
      - "traefik.http.services.ontology-registry.loadbalancer.server.port=8084"
      - "traefik.http.routers.ontology-registry.rule=PathPrefix(`/dart/api/v1/ontologies`)"
      - "traefik.http.routers.ontology-registry.priority=${ONTOLOGY_REGISTRY_PRIORITY:-100}"
    networks:
      - dart

  dart-tenants:
    image: twosixlabsdart/dart-tenants:latest
    restart: unless-stopped
    container_name: dart-tenants
    hostname: dart-tenants
    labels:
      - "autoheal=true"
      - "traefik.enable=true"
      - "traefik.http.services.tenants-service.loadbalancer.server.port=8080"
      - "traefik.http.routers.dart-tenants.rule=PathPrefix(`/dart/api/v1/tenants`)"
      - "traefik.http.routers.dart-tenants.priority=${DART_TENANTS_PRIORITY:-100}"
    environment:
      DART_AUTH_BYPASS: "true"
      ARANGODB_HOST: dart-arangodb
      ELASTICSEARCH_HOST: dart-es-master
      INDEX_2: none
    networks:
      - dart

  traefik:
    image: traefik:2.6
    container_name: traefik
    hostname: traefik
    restart: unless-stopped
    command:
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--api.insecure=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    networks:
      - dart
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./data/letsencrypt:/letsencrypt"

  qntfy-key-sentence-annotator:
    image: twosixlabsdart/qntfy-key-sentence:latest
    container_name: qntfy-key-sentence-annotator
    hostname: qntfy-key-sentence-annotator
    restart: unless-stopped
    labels:
      - "autoheal=true"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:45008/api/v1/health" ]
      interval: 30s
      timeout: 150s
      start_period: 30s
    environment:
      MAX_DOCUMENT_LENGTH: 2000000
      ANALYTIC_PORT: 45008
    networks:
      - dart

  qntfy-ner-annotator:
    image: twosixlabsdart/qntfy-ner:latest
    container_name: qntfy-ner-annotator
    hostname: qntfy-ner-annotator
    restart: unless-stopped
    labels:
      - "autoheal=true"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:45000/api/v1/health" ]
      interval: 10s
      start_period: 30s
    environment:
      MAX_DOCUMENT_LENGTH: 2000000
      ANALYTIC_PORT: 45000
    networks:
      - dart

  qntfy-events-annotator:
    image: twosixlabsdart/qntfy-events:latest
    hostname: qntfy-events-annotator
    container_name: qntfy-events-annotator
    restart: unless-stopped
    labels:
      - "autoheal=true"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:45001/api/v1/health" ]
      interval: 10s
      start_period: 30s
    environment:
      MAX_DOCUMENT_LENGTH: 2000000
      ANALYTIC_PORT: 45001
    networks:
      - dart

  qntfy-categories-annotator:
    image: twosixlabsdart/qntfy-categories:latest
    container_name: qntfy-categories-annotator
    hostname: qntfy-categories-annotator
    restart: unless-stopped
    labels:
      - "autoheal=true"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:45002/api/v1/health" ]
      interval: 10s
      start_period: 30s
    environment:
      MAX_DOCUMENT_LENGTH: 2000000
      ANALYTIC_PORT: 45002
    networks:
      - dart

  eidos:
    image: clulab/eidos-dart:latest
    container_name: eidos
    hostname: eidos
    environment:
      EIDOS_MEMORY: -Xmx20g
      REST_CONSUMER_DOCUMENT_SERVICE: http://cdr-retrieval:8090/dart/api/v1/cdrs
      REST_CONSUMER_ONTOLOGY_SERVICE: http://ontology-registry:8084/dart/api/v1/ontologies
      REST_PRODUCER_SERVICE: http://readers-output:8080/dart/api/v1/readers/upload
      KAFKA_CONSUMER_BOOTSTRAP_SERVERS: kafka-broker-1:19092
      NOTIFICATION_KAFKA_TOPIC: dart.reader.notifications
      KAFKA_APP_TOPIC: dart.cdr.streaming.updates
      KAFKA_CONSUMER_OUTPUT_DIR: /opt/app/data/input/kafka
      KAFKA_CONSUMER_SECURITY_PROTOCOL: PLAINTEXT
      EIDOS_VERSION: julyEmbed1
      ONTOLOGY_VERSION: 2.3
    volumes:
      - ./data/eidos:/opt/app/data
    networks:
      - dart

  hume-reader:
    image: wmbbn/hume:R2022_03_21
    container_name: hume-reader
    hostname: hume-reader
    volumes:
      - ./hume-reader-config.json:/extra/config.json
    entrypoint: ["/usr/local/envs/py3-jni/bin/python3", "/wm_rootfs/git/Hume/src/python/dart_integration/streaming_processing.py"]
    networks:
      - dart

  hume-oiad:
    image: wmbbn/hume:R2022_03_21
    container_name: hume-oiad
    hostname: hume-oiad
    volumes:
      - ./hume-oiad-config.json:/extra/config.json
    entrypoint: [ "/usr/local/envs/hat_new/bin/python3", "/wm_rootfs/git/Hume/src/python/concept_discovery_dart_integration/concept_discovery_online/api.py" ]
    command:
      - "--config /extra/config.json"
    networks:
      - dart

#  indra:
#    image:
#    container_name: indra
#    hostname: indra
#    environment:
#      DART_WM_USERNAME: indra
#      INDRA_WM_SERVICE_DB: postgresql://postgres:${POSTGRES_PASSWORD}@indra-db:5432
#      DART_WM_URL: http://readers-output:1331
#      DART_WM_PASSWORD: ${DART_WM_PASSWORD}
#      INDRA_WORLD_ONTOLOGY_URL: <GitHub URL to ontology being used, may not be necessary if we start tracking ontologies via DART>
#    entrypoint: gunicorn -w 1 -b :8000 -t 600 indra_world.service.app:app

#  indra-db:
#    image:
#    container_name: indra-db
#    hostname: indra-db
#    environment:
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      PGDATA: /var/lib/postgresql/pgdata

  autoheal:
    image: willfarrell/autoheal
    container_name: autoheal
    hostname: autoheal
    restart: unless-stopped
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  dart:
